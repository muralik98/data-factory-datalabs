{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "BookingDataCosmos",
						"type": "DatasetReference"
					},
					"name": "BookingData"
				},
				{
					"dataset": {
						"referenceName": "BookingFactDataSynapse",
						"type": "DatasetReference"
					},
					"name": "SynpaseForLookup"
				},
				{
					"dataset": {
						"referenceName": "BookingFactDataSynapse",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "DataQualityChecks"
				},
				{
					"name": "DerivedColumns"
				},
				{
					"name": "LookupSynapse"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          booking_id as string,",
				"          property_id as string,",
				"          customer_id as integer,",
				"          owner_id as string,",
				"          check_in_date as string,",
				"          check_out_date as string,",
				"          booking_date as string,",
				"          amount as double,",
				"          currency as string,",
				"          property_location as (city as string, country as string),",
				"          timestamp as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     enableChangeFeed: true,",
				"     changeFeedStartFromTheBeginning: false,",
				"     format: 'document',",
				"     systemColumns: false) ~> BookingData",
				"source(output(",
				"          booking_id as string,",
				"          property_id as string,",
				"          customer_id as integer,",
				"          owner_id as string,",
				"          check_in_date as date,",
				"          check_out_date as date,",
				"          booking_date as timestamp,",
				"          amount as double,",
				"          currency as string,",
				"          city as string,",
				"          country as string,",
				"          full_address as string,",
				"          stay_duration as long,",
				"          booking_year as integer,",
				"          booking_month as integer,",
				"          timestamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> SynpaseForLookup",
				"source(output(",
				"          booking_id as string,",
				"          property_id as string,",
				"          customer_id as integer,",
				"          owner_id as string,",
				"          check_in_date as date,",
				"          check_out_date as date,",
				"          booking_date as timestamp,",
				"          amount as double,",
				"          currency as string,",
				"          city as string,",
				"          country as string,",
				"          full_address as string,",
				"          stay_duration as long,",
				"          booking_year as integer,",
				"          booking_month as integer,",
				"          timestamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> source1",
				"BookingData split(check_out_date<check_in_date,",
				"     disjoint: true) ~> DataQualityChecks@(BadRecords, AcceptedRecords)",
				"DataQualityChecks@AcceptedRecords derive(stay_duration = toTimestamp(check_out_date) - toTimestamp(check_in_date),",
				"          booking_year = year(toTimestamp(booking_date)),",
				"          booking_month = month(toTimestamp(booking_date)),",
				"          full_address = concat( property_location.city, ',',  property_location.country)\r",
				",",
				"          city = property_location.city,",
				"          country = property_location.country) ~> DerivedColumns",
				"DerivedColumns, SynpaseForLookup lookup(DataQualityChecks@AcceptedRecords@booking_id == SynpaseForLookup@booking_id,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     desc(SynpaseForLookup@timestamp, true),",
				"     broadcast: 'auto')~> LookupSynapse",
				"LookupSynapse alterRow() ~> alterRow1"
			]
		}
	}
}